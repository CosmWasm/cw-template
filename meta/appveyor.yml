# This CI configuration tests the cw-template repository itself,
# not the resulting project. We want to ensure that
# 1. the template to project generation works
# 2. the template files are up to date
#
# We chose Appveyor for this task as it allows us to use an arbitrary config
# location. Furthermore it allows us to ship a Circle CI and Travis config
# generated for the resulting project.

image: Ubuntu

environment:
  TOOLCHAIN: 1.44.1

cache:
  - $HOME/.rustup/ -> meta/appveyor.yml
  # For details about cargo caching see https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
  - $HOME/.cargo/bin/ -> meta/appveyor.yml
  - $HOME/.cargo/registry/index/ -> meta/appveyor.yml
  - $HOME/.cargo/registry/cache/ -> meta/appveyor.yml
  - $HOME/.cargo/git/db/ -> meta/appveyor.yml

install:
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain "$TOOLCHAIN" -y
  - source $HOME/.cargo/env
  - rustc --version
  - cargo --version
  - rustup target add wasm32-unknown-unknown
  - cargo install --features vendored-openssl cargo-generate || true

build_script:
  # No matter what is currently checked out by the CI (master, other branch, PR merge commit),
  # we create a temporary local branch from that point with a constant name, which we need for
  # cargo generate.
  - git branch current-ci-checkout
  - cd ..
  - cargo generate --git cw-template --name testgen-ci --branch current-ci-checkout
  - cd testgen-ci
  - ls -lA
  - cargo fmt -- --check
  - cargo unit-test
  - cargo wasm
  - cargo schema

# whitelist long living branches
branches:
  only:
    - master
